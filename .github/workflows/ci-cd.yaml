name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  IMAGE_NAME: agentic-payroll
  REGISTRY: ghcr.io
  K8S_NAMESPACE: payroll-system

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

    - name: Run unit tests (if available)
      run: |
        # Add your test command here
        # python -m pytest tests/ || true
        echo "Unit tests placeholder"

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

    - name: Generate build report
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY

  # Job 2: Deploy to Kubernetes (for main/master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    # Configure kubectl with your cluster
    # This example uses a self-hosted Kubernetes cluster
    # For cloud providers (EKS, GKE, AKS), use their specific actions
    - name: Configure kubectl
      run: |
        echo "Configure kubectl with your cluster credentials"
        # Example for kubeconfig secret:
        # echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

        # For Minikube/local development, skip this step
        echo "Skipping kubectl configuration for local development"

    - name: Update Kubernetes manifests
      run: |
        # Update image tag in manifests
        IMAGE_TAG="${{ github.sha }}"
        sed -i "s|image: agentic-payroll:latest|image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" k8s/04-cronjob.yaml
        sed -i "s|image: agentic-payroll:latest|image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" k8s/05-job-manual.yaml

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster..."
        # Uncomment when cluster is configured:
        # kubectl apply -f k8s/01-namespace.yaml
        # kubectl apply -f k8s/02-configmap.yaml
        # kubectl apply -f k8s/03-persistent-volume.yaml
        # kubectl apply -f k8s/04-cronjob.yaml

        echo "Deployment step - configure cluster access first"

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        # Uncomment when cluster is configured:
        # kubectl rollout status cronjob/payroll-processor -n ${{ env.K8S_NAMESPACE }} --timeout=5m
        # kubectl get all -n ${{ env.K8S_NAMESPACE }}

        echo "Verification step - configure cluster access first"

    - name: Post deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace:** ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** âœ… Deployed" >> $GITHUB_STEP_SUMMARY

  # Job 3: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
